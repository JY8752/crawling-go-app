// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"JY8752/crawling_app_batch/ent/migrate"

	"JY8752/crawling_app_batch/ent/crawledurl"
	"JY8752/crawling_app_batch/ent/linkurl"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CrawledUrl is the client for interacting with the CrawledUrl builders.
	CrawledUrl *CrawledUrlClient
	// LinkUrl is the client for interacting with the LinkUrl builders.
	LinkUrl *LinkUrlClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CrawledUrl = NewCrawledUrlClient(c.config)
	c.LinkUrl = NewLinkUrlClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		CrawledUrl: NewCrawledUrlClient(cfg),
		LinkUrl:    NewLinkUrlClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		CrawledUrl: NewCrawledUrlClient(cfg),
		LinkUrl:    NewLinkUrlClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CrawledUrl.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CrawledUrl.Use(hooks...)
	c.LinkUrl.Use(hooks...)
}

// CrawledUrlClient is a client for the CrawledUrl schema.
type CrawledUrlClient struct {
	config
}

// NewCrawledUrlClient returns a client for the CrawledUrl from the given config.
func NewCrawledUrlClient(c config) *CrawledUrlClient {
	return &CrawledUrlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `crawledurl.Hooks(f(g(h())))`.
func (c *CrawledUrlClient) Use(hooks ...Hook) {
	c.hooks.CrawledUrl = append(c.hooks.CrawledUrl, hooks...)
}

// Create returns a builder for creating a CrawledUrl entity.
func (c *CrawledUrlClient) Create() *CrawledUrlCreate {
	mutation := newCrawledUrlMutation(c.config, OpCreate)
	return &CrawledUrlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CrawledUrl entities.
func (c *CrawledUrlClient) CreateBulk(builders ...*CrawledUrlCreate) *CrawledUrlCreateBulk {
	return &CrawledUrlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CrawledUrl.
func (c *CrawledUrlClient) Update() *CrawledUrlUpdate {
	mutation := newCrawledUrlMutation(c.config, OpUpdate)
	return &CrawledUrlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CrawledUrlClient) UpdateOne(cu *CrawledUrl) *CrawledUrlUpdateOne {
	mutation := newCrawledUrlMutation(c.config, OpUpdateOne, withCrawledUrl(cu))
	return &CrawledUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CrawledUrlClient) UpdateOneID(id int) *CrawledUrlUpdateOne {
	mutation := newCrawledUrlMutation(c.config, OpUpdateOne, withCrawledUrlID(id))
	return &CrawledUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CrawledUrl.
func (c *CrawledUrlClient) Delete() *CrawledUrlDelete {
	mutation := newCrawledUrlMutation(c.config, OpDelete)
	return &CrawledUrlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CrawledUrlClient) DeleteOne(cu *CrawledUrl) *CrawledUrlDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CrawledUrlClient) DeleteOneID(id int) *CrawledUrlDeleteOne {
	builder := c.Delete().Where(crawledurl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CrawledUrlDeleteOne{builder}
}

// Query returns a query builder for CrawledUrl.
func (c *CrawledUrlClient) Query() *CrawledUrlQuery {
	return &CrawledUrlQuery{
		config: c.config,
	}
}

// Get returns a CrawledUrl entity by its id.
func (c *CrawledUrlClient) Get(ctx context.Context, id int) (*CrawledUrl, error) {
	return c.Query().Where(crawledurl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CrawledUrlClient) GetX(ctx context.Context, id int) *CrawledUrl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLinkUrls queries the link_urls edge of a CrawledUrl.
func (c *CrawledUrlClient) QueryLinkUrls(cu *CrawledUrl) *LinkUrlQuery {
	query := &LinkUrlQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(crawledurl.Table, crawledurl.FieldID, id),
			sqlgraph.To(linkurl.Table, linkurl.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, crawledurl.LinkUrlsTable, crawledurl.LinkUrlsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CrawledUrlClient) Hooks() []Hook {
	return c.hooks.CrawledUrl
}

// LinkUrlClient is a client for the LinkUrl schema.
type LinkUrlClient struct {
	config
}

// NewLinkUrlClient returns a client for the LinkUrl from the given config.
func NewLinkUrlClient(c config) *LinkUrlClient {
	return &LinkUrlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linkurl.Hooks(f(g(h())))`.
func (c *LinkUrlClient) Use(hooks ...Hook) {
	c.hooks.LinkUrl = append(c.hooks.LinkUrl, hooks...)
}

// Create returns a builder for creating a LinkUrl entity.
func (c *LinkUrlClient) Create() *LinkUrlCreate {
	mutation := newLinkUrlMutation(c.config, OpCreate)
	return &LinkUrlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinkUrl entities.
func (c *LinkUrlClient) CreateBulk(builders ...*LinkUrlCreate) *LinkUrlCreateBulk {
	return &LinkUrlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinkUrl.
func (c *LinkUrlClient) Update() *LinkUrlUpdate {
	mutation := newLinkUrlMutation(c.config, OpUpdate)
	return &LinkUrlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinkUrlClient) UpdateOne(lu *LinkUrl) *LinkUrlUpdateOne {
	mutation := newLinkUrlMutation(c.config, OpUpdateOne, withLinkUrl(lu))
	return &LinkUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinkUrlClient) UpdateOneID(id int) *LinkUrlUpdateOne {
	mutation := newLinkUrlMutation(c.config, OpUpdateOne, withLinkUrlID(id))
	return &LinkUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinkUrl.
func (c *LinkUrlClient) Delete() *LinkUrlDelete {
	mutation := newLinkUrlMutation(c.config, OpDelete)
	return &LinkUrlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LinkUrlClient) DeleteOne(lu *LinkUrl) *LinkUrlDeleteOne {
	return c.DeleteOneID(lu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LinkUrlClient) DeleteOneID(id int) *LinkUrlDeleteOne {
	builder := c.Delete().Where(linkurl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinkUrlDeleteOne{builder}
}

// Query returns a query builder for LinkUrl.
func (c *LinkUrlClient) Query() *LinkUrlQuery {
	return &LinkUrlQuery{
		config: c.config,
	}
}

// Get returns a LinkUrl entity by its id.
func (c *LinkUrlClient) Get(ctx context.Context, id int) (*LinkUrl, error) {
	return c.Query().Where(linkurl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinkUrlClient) GetX(ctx context.Context, id int) *LinkUrl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBaseURL queries the base_url edge of a LinkUrl.
func (c *LinkUrlClient) QueryBaseURL(lu *LinkUrl) *CrawledUrlQuery {
	query := &CrawledUrlQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(linkurl.Table, linkurl.FieldID, id),
			sqlgraph.To(crawledurl.Table, crawledurl.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, linkurl.BaseURLTable, linkurl.BaseURLPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinkUrlClient) Hooks() []Hook {
	return c.hooks.LinkUrl
}
