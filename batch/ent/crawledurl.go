// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_batch/ent/crawledurl"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CrawledUrl is the model entity for the CrawledUrl schema.
type CrawledUrl struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CrawledUrlQuery when eager-loading is set.
	Edges CrawledUrlEdges `json:"edges"`
}

// CrawledUrlEdges holds the relations/edges for other nodes in the graph.
type CrawledUrlEdges struct {
	// LinkUrls holds the value of the link_urls edge.
	LinkUrls []*LinkUrl `json:"link_urls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LinkUrlsOrErr returns the LinkUrls value or an error if the edge
// was not loaded in eager-loading.
func (e CrawledUrlEdges) LinkUrlsOrErr() ([]*LinkUrl, error) {
	if e.loadedTypes[0] {
		return e.LinkUrls, nil
	}
	return nil, &NotLoadedError{edge: "link_urls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CrawledUrl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case crawledurl.FieldID:
			values[i] = new(sql.NullInt64)
		case crawledurl.FieldURL:
			values[i] = new(sql.NullString)
		case crawledurl.FieldCreatedAt, crawledurl.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CrawledUrl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CrawledUrl fields.
func (cu *CrawledUrl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case crawledurl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cu.ID = int(value.Int64)
		case crawledurl.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				cu.URL = value.String
			}
		case crawledurl.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cu.CreatedAt = value.Time
			}
		case crawledurl.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cu.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryLinkUrls queries the "link_urls" edge of the CrawledUrl entity.
func (cu *CrawledUrl) QueryLinkUrls() *LinkUrlQuery {
	return (&CrawledUrlClient{config: cu.config}).QueryLinkUrls(cu)
}

// Update returns a builder for updating this CrawledUrl.
// Note that you need to call CrawledUrl.Unwrap() before calling this method if this CrawledUrl
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *CrawledUrl) Update() *CrawledUrlUpdateOne {
	return (&CrawledUrlClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the CrawledUrl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *CrawledUrl) Unwrap() *CrawledUrl {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CrawledUrl is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *CrawledUrl) String() string {
	var builder strings.Builder
	builder.WriteString("CrawledUrl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cu.ID))
	builder.WriteString("url=")
	builder.WriteString(cu.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CrawledUrls is a parsable slice of CrawledUrl.
type CrawledUrls []*CrawledUrl

func (cu CrawledUrls) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
