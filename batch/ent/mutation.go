// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_batch/ent/crawledurl"
	"JY8752/crawling_app_batch/ent/linkurl"
	"JY8752/crawling_app_batch/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCrawledUrl = "CrawledUrl"
	TypeLinkUrl    = "LinkUrl"
)

// CrawledUrlMutation represents an operation that mutates the CrawledUrl nodes in the graph.
type CrawledUrlMutation struct {
	config
	op               Op
	typ              string
	id               *int
	url              *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	link_urls        map[int]struct{}
	removedlink_urls map[int]struct{}
	clearedlink_urls bool
	done             bool
	oldValue         func(context.Context) (*CrawledUrl, error)
	predicates       []predicate.CrawledUrl
}

var _ ent.Mutation = (*CrawledUrlMutation)(nil)

// crawledurlOption allows management of the mutation configuration using functional options.
type crawledurlOption func(*CrawledUrlMutation)

// newCrawledUrlMutation creates new mutation for the CrawledUrl entity.
func newCrawledUrlMutation(c config, op Op, opts ...crawledurlOption) *CrawledUrlMutation {
	m := &CrawledUrlMutation{
		config:        c,
		op:            op,
		typ:           TypeCrawledUrl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCrawledUrlID sets the ID field of the mutation.
func withCrawledUrlID(id int) crawledurlOption {
	return func(m *CrawledUrlMutation) {
		var (
			err   error
			once  sync.Once
			value *CrawledUrl
		)
		m.oldValue = func(ctx context.Context) (*CrawledUrl, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CrawledUrl.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCrawledUrl sets the old CrawledUrl of the mutation.
func withCrawledUrl(node *CrawledUrl) crawledurlOption {
	return func(m *CrawledUrlMutation) {
		m.oldValue = func(context.Context) (*CrawledUrl, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CrawledUrlMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CrawledUrlMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CrawledUrlMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CrawledUrlMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CrawledUrl.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *CrawledUrlMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *CrawledUrlMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the CrawledUrl entity.
// If the CrawledUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrawledUrlMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *CrawledUrlMutation) ResetURL() {
	m.url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CrawledUrlMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CrawledUrlMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CrawledUrl entity.
// If the CrawledUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrawledUrlMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CrawledUrlMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CrawledUrlMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CrawledUrlMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CrawledUrl entity.
// If the CrawledUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrawledUrlMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CrawledUrlMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddLinkURLIDs adds the "link_urls" edge to the LinkUrl entity by ids.
func (m *CrawledUrlMutation) AddLinkURLIDs(ids ...int) {
	if m.link_urls == nil {
		m.link_urls = make(map[int]struct{})
	}
	for i := range ids {
		m.link_urls[ids[i]] = struct{}{}
	}
}

// ClearLinkUrls clears the "link_urls" edge to the LinkUrl entity.
func (m *CrawledUrlMutation) ClearLinkUrls() {
	m.clearedlink_urls = true
}

// LinkUrlsCleared reports if the "link_urls" edge to the LinkUrl entity was cleared.
func (m *CrawledUrlMutation) LinkUrlsCleared() bool {
	return m.clearedlink_urls
}

// RemoveLinkURLIDs removes the "link_urls" edge to the LinkUrl entity by IDs.
func (m *CrawledUrlMutation) RemoveLinkURLIDs(ids ...int) {
	if m.removedlink_urls == nil {
		m.removedlink_urls = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.link_urls, ids[i])
		m.removedlink_urls[ids[i]] = struct{}{}
	}
}

// RemovedLinkUrls returns the removed IDs of the "link_urls" edge to the LinkUrl entity.
func (m *CrawledUrlMutation) RemovedLinkUrlsIDs() (ids []int) {
	for id := range m.removedlink_urls {
		ids = append(ids, id)
	}
	return
}

// LinkUrlsIDs returns the "link_urls" edge IDs in the mutation.
func (m *CrawledUrlMutation) LinkUrlsIDs() (ids []int) {
	for id := range m.link_urls {
		ids = append(ids, id)
	}
	return
}

// ResetLinkUrls resets all changes to the "link_urls" edge.
func (m *CrawledUrlMutation) ResetLinkUrls() {
	m.link_urls = nil
	m.clearedlink_urls = false
	m.removedlink_urls = nil
}

// Where appends a list predicates to the CrawledUrlMutation builder.
func (m *CrawledUrlMutation) Where(ps ...predicate.CrawledUrl) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CrawledUrlMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CrawledUrl).
func (m *CrawledUrlMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CrawledUrlMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.url != nil {
		fields = append(fields, crawledurl.FieldURL)
	}
	if m.created_at != nil {
		fields = append(fields, crawledurl.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, crawledurl.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CrawledUrlMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case crawledurl.FieldURL:
		return m.URL()
	case crawledurl.FieldCreatedAt:
		return m.CreatedAt()
	case crawledurl.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CrawledUrlMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case crawledurl.FieldURL:
		return m.OldURL(ctx)
	case crawledurl.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case crawledurl.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CrawledUrl field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CrawledUrlMutation) SetField(name string, value ent.Value) error {
	switch name {
	case crawledurl.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case crawledurl.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case crawledurl.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CrawledUrl field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CrawledUrlMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CrawledUrlMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CrawledUrlMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CrawledUrl numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CrawledUrlMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CrawledUrlMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CrawledUrlMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CrawledUrl nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CrawledUrlMutation) ResetField(name string) error {
	switch name {
	case crawledurl.FieldURL:
		m.ResetURL()
		return nil
	case crawledurl.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case crawledurl.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CrawledUrl field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CrawledUrlMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.link_urls != nil {
		edges = append(edges, crawledurl.EdgeLinkUrls)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CrawledUrlMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case crawledurl.EdgeLinkUrls:
		ids := make([]ent.Value, 0, len(m.link_urls))
		for id := range m.link_urls {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CrawledUrlMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlink_urls != nil {
		edges = append(edges, crawledurl.EdgeLinkUrls)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CrawledUrlMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case crawledurl.EdgeLinkUrls:
		ids := make([]ent.Value, 0, len(m.removedlink_urls))
		for id := range m.removedlink_urls {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CrawledUrlMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlink_urls {
		edges = append(edges, crawledurl.EdgeLinkUrls)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CrawledUrlMutation) EdgeCleared(name string) bool {
	switch name {
	case crawledurl.EdgeLinkUrls:
		return m.clearedlink_urls
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CrawledUrlMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CrawledUrl unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CrawledUrlMutation) ResetEdge(name string) error {
	switch name {
	case crawledurl.EdgeLinkUrls:
		m.ResetLinkUrls()
		return nil
	}
	return fmt.Errorf("unknown CrawledUrl edge %s", name)
}

// LinkUrlMutation represents an operation that mutates the LinkUrl nodes in the graph.
type LinkUrlMutation struct {
	config
	op              Op
	typ             string
	id              *int
	url             *string
	referer         *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	base_url        map[int]struct{}
	removedbase_url map[int]struct{}
	clearedbase_url bool
	done            bool
	oldValue        func(context.Context) (*LinkUrl, error)
	predicates      []predicate.LinkUrl
}

var _ ent.Mutation = (*LinkUrlMutation)(nil)

// linkurlOption allows management of the mutation configuration using functional options.
type linkurlOption func(*LinkUrlMutation)

// newLinkUrlMutation creates new mutation for the LinkUrl entity.
func newLinkUrlMutation(c config, op Op, opts ...linkurlOption) *LinkUrlMutation {
	m := &LinkUrlMutation{
		config:        c,
		op:            op,
		typ:           TypeLinkUrl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinkUrlID sets the ID field of the mutation.
func withLinkUrlID(id int) linkurlOption {
	return func(m *LinkUrlMutation) {
		var (
			err   error
			once  sync.Once
			value *LinkUrl
		)
		m.oldValue = func(ctx context.Context) (*LinkUrl, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinkUrl.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinkUrl sets the old LinkUrl of the mutation.
func withLinkUrl(node *LinkUrl) linkurlOption {
	return func(m *LinkUrlMutation) {
		m.oldValue = func(context.Context) (*LinkUrl, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinkUrlMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinkUrlMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinkUrlMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LinkUrlMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LinkUrl.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *LinkUrlMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *LinkUrlMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the LinkUrl entity.
// If the LinkUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkUrlMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *LinkUrlMutation) ResetURL() {
	m.url = nil
}

// SetReferer sets the "referer" field.
func (m *LinkUrlMutation) SetReferer(s string) {
	m.referer = &s
}

// Referer returns the value of the "referer" field in the mutation.
func (m *LinkUrlMutation) Referer() (r string, exists bool) {
	v := m.referer
	if v == nil {
		return
	}
	return *v, true
}

// OldReferer returns the old "referer" field's value of the LinkUrl entity.
// If the LinkUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkUrlMutation) OldReferer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferer: %w", err)
	}
	return oldValue.Referer, nil
}

// ResetReferer resets all changes to the "referer" field.
func (m *LinkUrlMutation) ResetReferer() {
	m.referer = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LinkUrlMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LinkUrlMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LinkUrl entity.
// If the LinkUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkUrlMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LinkUrlMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LinkUrlMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LinkUrlMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LinkUrl entity.
// If the LinkUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkUrlMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LinkUrlMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddBaseURLIDs adds the "base_url" edge to the CrawledUrl entity by ids.
func (m *LinkUrlMutation) AddBaseURLIDs(ids ...int) {
	if m.base_url == nil {
		m.base_url = make(map[int]struct{})
	}
	for i := range ids {
		m.base_url[ids[i]] = struct{}{}
	}
}

// ClearBaseURL clears the "base_url" edge to the CrawledUrl entity.
func (m *LinkUrlMutation) ClearBaseURL() {
	m.clearedbase_url = true
}

// BaseURLCleared reports if the "base_url" edge to the CrawledUrl entity was cleared.
func (m *LinkUrlMutation) BaseURLCleared() bool {
	return m.clearedbase_url
}

// RemoveBaseURLIDs removes the "base_url" edge to the CrawledUrl entity by IDs.
func (m *LinkUrlMutation) RemoveBaseURLIDs(ids ...int) {
	if m.removedbase_url == nil {
		m.removedbase_url = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.base_url, ids[i])
		m.removedbase_url[ids[i]] = struct{}{}
	}
}

// RemovedBaseURL returns the removed IDs of the "base_url" edge to the CrawledUrl entity.
func (m *LinkUrlMutation) RemovedBaseURLIDs() (ids []int) {
	for id := range m.removedbase_url {
		ids = append(ids, id)
	}
	return
}

// BaseURLIDs returns the "base_url" edge IDs in the mutation.
func (m *LinkUrlMutation) BaseURLIDs() (ids []int) {
	for id := range m.base_url {
		ids = append(ids, id)
	}
	return
}

// ResetBaseURL resets all changes to the "base_url" edge.
func (m *LinkUrlMutation) ResetBaseURL() {
	m.base_url = nil
	m.clearedbase_url = false
	m.removedbase_url = nil
}

// Where appends a list predicates to the LinkUrlMutation builder.
func (m *LinkUrlMutation) Where(ps ...predicate.LinkUrl) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinkUrlMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinkUrl).
func (m *LinkUrlMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinkUrlMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.url != nil {
		fields = append(fields, linkurl.FieldURL)
	}
	if m.referer != nil {
		fields = append(fields, linkurl.FieldReferer)
	}
	if m.created_at != nil {
		fields = append(fields, linkurl.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, linkurl.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinkUrlMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linkurl.FieldURL:
		return m.URL()
	case linkurl.FieldReferer:
		return m.Referer()
	case linkurl.FieldCreatedAt:
		return m.CreatedAt()
	case linkurl.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinkUrlMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linkurl.FieldURL:
		return m.OldURL(ctx)
	case linkurl.FieldReferer:
		return m.OldReferer(ctx)
	case linkurl.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case linkurl.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LinkUrl field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkUrlMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linkurl.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case linkurl.FieldReferer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferer(v)
		return nil
	case linkurl.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case linkurl.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LinkUrl field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinkUrlMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinkUrlMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkUrlMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LinkUrl numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinkUrlMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinkUrlMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinkUrlMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinkUrl nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinkUrlMutation) ResetField(name string) error {
	switch name {
	case linkurl.FieldURL:
		m.ResetURL()
		return nil
	case linkurl.FieldReferer:
		m.ResetReferer()
		return nil
	case linkurl.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case linkurl.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown LinkUrl field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinkUrlMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.base_url != nil {
		edges = append(edges, linkurl.EdgeBaseURL)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinkUrlMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case linkurl.EdgeBaseURL:
		ids := make([]ent.Value, 0, len(m.base_url))
		for id := range m.base_url {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinkUrlMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbase_url != nil {
		edges = append(edges, linkurl.EdgeBaseURL)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinkUrlMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case linkurl.EdgeBaseURL:
		ids := make([]ent.Value, 0, len(m.removedbase_url))
		for id := range m.removedbase_url {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinkUrlMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbase_url {
		edges = append(edges, linkurl.EdgeBaseURL)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinkUrlMutation) EdgeCleared(name string) bool {
	switch name {
	case linkurl.EdgeBaseURL:
		return m.clearedbase_url
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinkUrlMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown LinkUrl unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinkUrlMutation) ResetEdge(name string) error {
	switch name {
	case linkurl.EdgeBaseURL:
		m.ResetBaseURL()
		return nil
	}
	return fmt.Errorf("unknown LinkUrl edge %s", name)
}
