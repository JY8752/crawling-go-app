// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_batch/ent/crawledurl"
	"JY8752/crawling_app_batch/ent/linkurl"
	"JY8752/crawling_app_batch/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CrawledUrlQuery is the builder for querying CrawledUrl entities.
type CrawledUrlQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.CrawledUrl
	withLinkUrls *LinkUrlQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CrawledUrlQuery builder.
func (cuq *CrawledUrlQuery) Where(ps ...predicate.CrawledUrl) *CrawledUrlQuery {
	cuq.predicates = append(cuq.predicates, ps...)
	return cuq
}

// Limit adds a limit step to the query.
func (cuq *CrawledUrlQuery) Limit(limit int) *CrawledUrlQuery {
	cuq.limit = &limit
	return cuq
}

// Offset adds an offset step to the query.
func (cuq *CrawledUrlQuery) Offset(offset int) *CrawledUrlQuery {
	cuq.offset = &offset
	return cuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cuq *CrawledUrlQuery) Unique(unique bool) *CrawledUrlQuery {
	cuq.unique = &unique
	return cuq
}

// Order adds an order step to the query.
func (cuq *CrawledUrlQuery) Order(o ...OrderFunc) *CrawledUrlQuery {
	cuq.order = append(cuq.order, o...)
	return cuq
}

// QueryLinkUrls chains the current query on the "link_urls" edge.
func (cuq *CrawledUrlQuery) QueryLinkUrls() *LinkUrlQuery {
	query := &LinkUrlQuery{config: cuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(crawledurl.Table, crawledurl.FieldID, selector),
			sqlgraph.To(linkurl.Table, linkurl.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, crawledurl.LinkUrlsTable, crawledurl.LinkUrlsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CrawledUrl entity from the query.
// Returns a *NotFoundError when no CrawledUrl was found.
func (cuq *CrawledUrlQuery) First(ctx context.Context) (*CrawledUrl, error) {
	nodes, err := cuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{crawledurl.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cuq *CrawledUrlQuery) FirstX(ctx context.Context) *CrawledUrl {
	node, err := cuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CrawledUrl ID from the query.
// Returns a *NotFoundError when no CrawledUrl ID was found.
func (cuq *CrawledUrlQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{crawledurl.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cuq *CrawledUrlQuery) FirstIDX(ctx context.Context) int {
	id, err := cuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CrawledUrl entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CrawledUrl entity is found.
// Returns a *NotFoundError when no CrawledUrl entities are found.
func (cuq *CrawledUrlQuery) Only(ctx context.Context) (*CrawledUrl, error) {
	nodes, err := cuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{crawledurl.Label}
	default:
		return nil, &NotSingularError{crawledurl.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cuq *CrawledUrlQuery) OnlyX(ctx context.Context) *CrawledUrl {
	node, err := cuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CrawledUrl ID in the query.
// Returns a *NotSingularError when more than one CrawledUrl ID is found.
// Returns a *NotFoundError when no entities are found.
func (cuq *CrawledUrlQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{crawledurl.Label}
	default:
		err = &NotSingularError{crawledurl.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cuq *CrawledUrlQuery) OnlyIDX(ctx context.Context) int {
	id, err := cuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CrawledUrls.
func (cuq *CrawledUrlQuery) All(ctx context.Context) ([]*CrawledUrl, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cuq *CrawledUrlQuery) AllX(ctx context.Context) []*CrawledUrl {
	nodes, err := cuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CrawledUrl IDs.
func (cuq *CrawledUrlQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cuq.Select(crawledurl.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cuq *CrawledUrlQuery) IDsX(ctx context.Context) []int {
	ids, err := cuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cuq *CrawledUrlQuery) Count(ctx context.Context) (int, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cuq *CrawledUrlQuery) CountX(ctx context.Context) int {
	count, err := cuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cuq *CrawledUrlQuery) Exist(ctx context.Context) (bool, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cuq *CrawledUrlQuery) ExistX(ctx context.Context) bool {
	exist, err := cuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CrawledUrlQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cuq *CrawledUrlQuery) Clone() *CrawledUrlQuery {
	if cuq == nil {
		return nil
	}
	return &CrawledUrlQuery{
		config:       cuq.config,
		limit:        cuq.limit,
		offset:       cuq.offset,
		order:        append([]OrderFunc{}, cuq.order...),
		predicates:   append([]predicate.CrawledUrl{}, cuq.predicates...),
		withLinkUrls: cuq.withLinkUrls.Clone(),
		// clone intermediate query.
		sql:    cuq.sql.Clone(),
		path:   cuq.path,
		unique: cuq.unique,
	}
}

// WithLinkUrls tells the query-builder to eager-load the nodes that are connected to
// the "link_urls" edge. The optional arguments are used to configure the query builder of the edge.
func (cuq *CrawledUrlQuery) WithLinkUrls(opts ...func(*LinkUrlQuery)) *CrawledUrlQuery {
	query := &LinkUrlQuery{config: cuq.config}
	for _, opt := range opts {
		opt(query)
	}
	cuq.withLinkUrls = query
	return cuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		URL string `json:"url,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CrawledUrl.Query().
//		GroupBy(crawledurl.FieldURL).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cuq *CrawledUrlQuery) GroupBy(field string, fields ...string) *CrawledUrlGroupBy {
	grbuild := &CrawledUrlGroupBy{config: cuq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cuq.sqlQuery(ctx), nil
	}
	grbuild.label = crawledurl.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		URL string `json:"url,omitempty"`
//	}
//
//	client.CrawledUrl.Query().
//		Select(crawledurl.FieldURL).
//		Scan(ctx, &v)
//
func (cuq *CrawledUrlQuery) Select(fields ...string) *CrawledUrlSelect {
	cuq.fields = append(cuq.fields, fields...)
	selbuild := &CrawledUrlSelect{CrawledUrlQuery: cuq}
	selbuild.label = crawledurl.Label
	selbuild.flds, selbuild.scan = &cuq.fields, selbuild.Scan
	return selbuild
}

func (cuq *CrawledUrlQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cuq.fields {
		if !crawledurl.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cuq.path != nil {
		prev, err := cuq.path(ctx)
		if err != nil {
			return err
		}
		cuq.sql = prev
	}
	return nil
}

func (cuq *CrawledUrlQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CrawledUrl, error) {
	var (
		nodes       = []*CrawledUrl{}
		_spec       = cuq.querySpec()
		loadedTypes = [1]bool{
			cuq.withLinkUrls != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CrawledUrl).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CrawledUrl{config: cuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cuq.withLinkUrls; query != nil {
		if err := cuq.loadLinkUrls(ctx, query, nodes,
			func(n *CrawledUrl) { n.Edges.LinkUrls = []*LinkUrl{} },
			func(n *CrawledUrl, e *LinkUrl) { n.Edges.LinkUrls = append(n.Edges.LinkUrls, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cuq *CrawledUrlQuery) loadLinkUrls(ctx context.Context, query *LinkUrlQuery, nodes []*CrawledUrl, init func(*CrawledUrl), assign func(*CrawledUrl, *LinkUrl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CrawledUrl)
	nids := make(map[int]map[*CrawledUrl]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(crawledurl.LinkUrlsTable)
		s.Join(joinT).On(s.C(linkurl.FieldID), joinT.C(crawledurl.LinkUrlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(crawledurl.LinkUrlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(crawledurl.LinkUrlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*CrawledUrl]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "link_urls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cuq *CrawledUrlQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cuq.querySpec()
	_spec.Node.Columns = cuq.fields
	if len(cuq.fields) > 0 {
		_spec.Unique = cuq.unique != nil && *cuq.unique
	}
	return sqlgraph.CountNodes(ctx, cuq.driver, _spec)
}

func (cuq *CrawledUrlQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cuq *CrawledUrlQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crawledurl.Table,
			Columns: crawledurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: crawledurl.FieldID,
			},
		},
		From:   cuq.sql,
		Unique: true,
	}
	if unique := cuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crawledurl.FieldID)
		for i := range fields {
			if fields[i] != crawledurl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cuq *CrawledUrlQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cuq.driver.Dialect())
	t1 := builder.Table(crawledurl.Table)
	columns := cuq.fields
	if len(columns) == 0 {
		columns = crawledurl.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cuq.sql != nil {
		selector = cuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cuq.unique != nil && *cuq.unique {
		selector.Distinct()
	}
	for _, p := range cuq.predicates {
		p(selector)
	}
	for _, p := range cuq.order {
		p(selector)
	}
	if offset := cuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CrawledUrlGroupBy is the group-by builder for CrawledUrl entities.
type CrawledUrlGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cugb *CrawledUrlGroupBy) Aggregate(fns ...AggregateFunc) *CrawledUrlGroupBy {
	cugb.fns = append(cugb.fns, fns...)
	return cugb
}

// Scan applies the group-by query and scans the result into the given value.
func (cugb *CrawledUrlGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cugb.path(ctx)
	if err != nil {
		return err
	}
	cugb.sql = query
	return cugb.sqlScan(ctx, v)
}

func (cugb *CrawledUrlGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cugb.fields {
		if !crawledurl.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cugb *CrawledUrlGroupBy) sqlQuery() *sql.Selector {
	selector := cugb.sql.Select()
	aggregation := make([]string, 0, len(cugb.fns))
	for _, fn := range cugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cugb.fields)+len(cugb.fns))
		for _, f := range cugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cugb.fields...)...)
}

// CrawledUrlSelect is the builder for selecting fields of CrawledUrl entities.
type CrawledUrlSelect struct {
	*CrawledUrlQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cus *CrawledUrlSelect) Scan(ctx context.Context, v any) error {
	if err := cus.prepareQuery(ctx); err != nil {
		return err
	}
	cus.sql = cus.CrawledUrlQuery.sqlQuery(ctx)
	return cus.sqlScan(ctx, v)
}

func (cus *CrawledUrlSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := cus.sql.Query()
	if err := cus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
