// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_rest/ent/crawledurl"
	"JY8752/crawling_app_rest/ent/linkurl"
	"JY8752/crawling_app_rest/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkUrlUpdate is the builder for updating LinkUrl entities.
type LinkUrlUpdate struct {
	config
	hooks    []Hook
	mutation *LinkUrlMutation
}

// Where appends a list predicates to the LinkUrlUpdate builder.
func (luu *LinkUrlUpdate) Where(ps ...predicate.LinkUrl) *LinkUrlUpdate {
	luu.mutation.Where(ps...)
	return luu
}

// SetURL sets the "url" field.
func (luu *LinkUrlUpdate) SetURL(s string) *LinkUrlUpdate {
	luu.mutation.SetURL(s)
	return luu
}

// SetReferer sets the "referer" field.
func (luu *LinkUrlUpdate) SetReferer(s string) *LinkUrlUpdate {
	luu.mutation.SetReferer(s)
	return luu
}

// SetCreatedAt sets the "created_at" field.
func (luu *LinkUrlUpdate) SetCreatedAt(t time.Time) *LinkUrlUpdate {
	luu.mutation.SetCreatedAt(t)
	return luu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luu *LinkUrlUpdate) SetNillableCreatedAt(t *time.Time) *LinkUrlUpdate {
	if t != nil {
		luu.SetCreatedAt(*t)
	}
	return luu
}

// SetUpdatedAt sets the "updated_at" field.
func (luu *LinkUrlUpdate) SetUpdatedAt(t time.Time) *LinkUrlUpdate {
	luu.mutation.SetUpdatedAt(t)
	return luu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (luu *LinkUrlUpdate) SetNillableUpdatedAt(t *time.Time) *LinkUrlUpdate {
	if t != nil {
		luu.SetUpdatedAt(*t)
	}
	return luu
}

// AddBaseURLIDs adds the "base_url" edge to the CrawledUrl entity by IDs.
func (luu *LinkUrlUpdate) AddBaseURLIDs(ids ...int) *LinkUrlUpdate {
	luu.mutation.AddBaseURLIDs(ids...)
	return luu
}

// AddBaseURL adds the "base_url" edges to the CrawledUrl entity.
func (luu *LinkUrlUpdate) AddBaseURL(c ...*CrawledUrl) *LinkUrlUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luu.AddBaseURLIDs(ids...)
}

// Mutation returns the LinkUrlMutation object of the builder.
func (luu *LinkUrlUpdate) Mutation() *LinkUrlMutation {
	return luu.mutation
}

// ClearBaseURL clears all "base_url" edges to the CrawledUrl entity.
func (luu *LinkUrlUpdate) ClearBaseURL() *LinkUrlUpdate {
	luu.mutation.ClearBaseURL()
	return luu
}

// RemoveBaseURLIDs removes the "base_url" edge to CrawledUrl entities by IDs.
func (luu *LinkUrlUpdate) RemoveBaseURLIDs(ids ...int) *LinkUrlUpdate {
	luu.mutation.RemoveBaseURLIDs(ids...)
	return luu
}

// RemoveBaseURL removes "base_url" edges to CrawledUrl entities.
func (luu *LinkUrlUpdate) RemoveBaseURL(c ...*CrawledUrl) *LinkUrlUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luu.RemoveBaseURLIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LinkUrlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(luu.hooks) == 0 {
		if err = luu.check(); err != nil {
			return 0, err
		}
		affected, err = luu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinkUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luu.check(); err != nil {
				return 0, err
			}
			luu.mutation = mutation
			affected, err = luu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(luu.hooks) - 1; i >= 0; i-- {
			if luu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LinkUrlUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LinkUrlUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LinkUrlUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luu *LinkUrlUpdate) check() error {
	if v, ok := luu.mutation.URL(); ok {
		if err := linkurl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "LinkUrl.url": %w`, err)}
		}
	}
	if v, ok := luu.mutation.Referer(); ok {
		if err := linkurl.RefererValidator(v); err != nil {
			return &ValidationError{Name: "referer", err: fmt.Errorf(`ent: validator failed for field "LinkUrl.referer": %w`, err)}
		}
	}
	return nil
}

func (luu *LinkUrlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linkurl.Table,
			Columns: linkurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linkurl.FieldID,
			},
		},
	}
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linkurl.FieldURL,
		})
	}
	if value, ok := luu.mutation.Referer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linkurl.FieldReferer,
		})
	}
	if value, ok := luu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linkurl.FieldCreatedAt,
		})
	}
	if value, ok := luu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linkurl.FieldUpdatedAt,
		})
	}
	if luu.mutation.BaseURLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.RemovedBaseURLIDs(); len(nodes) > 0 && !luu.mutation.BaseURLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.BaseURLIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LinkUrlUpdateOne is the builder for updating a single LinkUrl entity.
type LinkUrlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkUrlMutation
}

// SetURL sets the "url" field.
func (luuo *LinkUrlUpdateOne) SetURL(s string) *LinkUrlUpdateOne {
	luuo.mutation.SetURL(s)
	return luuo
}

// SetReferer sets the "referer" field.
func (luuo *LinkUrlUpdateOne) SetReferer(s string) *LinkUrlUpdateOne {
	luuo.mutation.SetReferer(s)
	return luuo
}

// SetCreatedAt sets the "created_at" field.
func (luuo *LinkUrlUpdateOne) SetCreatedAt(t time.Time) *LinkUrlUpdateOne {
	luuo.mutation.SetCreatedAt(t)
	return luuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luuo *LinkUrlUpdateOne) SetNillableCreatedAt(t *time.Time) *LinkUrlUpdateOne {
	if t != nil {
		luuo.SetCreatedAt(*t)
	}
	return luuo
}

// SetUpdatedAt sets the "updated_at" field.
func (luuo *LinkUrlUpdateOne) SetUpdatedAt(t time.Time) *LinkUrlUpdateOne {
	luuo.mutation.SetUpdatedAt(t)
	return luuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (luuo *LinkUrlUpdateOne) SetNillableUpdatedAt(t *time.Time) *LinkUrlUpdateOne {
	if t != nil {
		luuo.SetUpdatedAt(*t)
	}
	return luuo
}

// AddBaseURLIDs adds the "base_url" edge to the CrawledUrl entity by IDs.
func (luuo *LinkUrlUpdateOne) AddBaseURLIDs(ids ...int) *LinkUrlUpdateOne {
	luuo.mutation.AddBaseURLIDs(ids...)
	return luuo
}

// AddBaseURL adds the "base_url" edges to the CrawledUrl entity.
func (luuo *LinkUrlUpdateOne) AddBaseURL(c ...*CrawledUrl) *LinkUrlUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luuo.AddBaseURLIDs(ids...)
}

// Mutation returns the LinkUrlMutation object of the builder.
func (luuo *LinkUrlUpdateOne) Mutation() *LinkUrlMutation {
	return luuo.mutation
}

// ClearBaseURL clears all "base_url" edges to the CrawledUrl entity.
func (luuo *LinkUrlUpdateOne) ClearBaseURL() *LinkUrlUpdateOne {
	luuo.mutation.ClearBaseURL()
	return luuo
}

// RemoveBaseURLIDs removes the "base_url" edge to CrawledUrl entities by IDs.
func (luuo *LinkUrlUpdateOne) RemoveBaseURLIDs(ids ...int) *LinkUrlUpdateOne {
	luuo.mutation.RemoveBaseURLIDs(ids...)
	return luuo
}

// RemoveBaseURL removes "base_url" edges to CrawledUrl entities.
func (luuo *LinkUrlUpdateOne) RemoveBaseURL(c ...*CrawledUrl) *LinkUrlUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luuo.RemoveBaseURLIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LinkUrlUpdateOne) Select(field string, fields ...string) *LinkUrlUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LinkUrl entity.
func (luuo *LinkUrlUpdateOne) Save(ctx context.Context) (*LinkUrl, error) {
	var (
		err  error
		node *LinkUrl
	)
	if len(luuo.hooks) == 0 {
		if err = luuo.check(); err != nil {
			return nil, err
		}
		node, err = luuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinkUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luuo.check(); err != nil {
				return nil, err
			}
			luuo.mutation = mutation
			node, err = luuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luuo.hooks) - 1; i >= 0; i-- {
			if luuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, luuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LinkUrl)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LinkUrlMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LinkUrlUpdateOne) SaveX(ctx context.Context) *LinkUrl {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LinkUrlUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LinkUrlUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luuo *LinkUrlUpdateOne) check() error {
	if v, ok := luuo.mutation.URL(); ok {
		if err := linkurl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "LinkUrl.url": %w`, err)}
		}
	}
	if v, ok := luuo.mutation.Referer(); ok {
		if err := linkurl.RefererValidator(v); err != nil {
			return &ValidationError{Name: "referer", err: fmt.Errorf(`ent: validator failed for field "LinkUrl.referer": %w`, err)}
		}
	}
	return nil
}

func (luuo *LinkUrlUpdateOne) sqlSave(ctx context.Context) (_node *LinkUrl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linkurl.Table,
			Columns: linkurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linkurl.FieldID,
			},
		},
	}
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LinkUrl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linkurl.FieldID)
		for _, f := range fields {
			if !linkurl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linkurl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linkurl.FieldURL,
		})
	}
	if value, ok := luuo.mutation.Referer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linkurl.FieldReferer,
		})
	}
	if value, ok := luuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linkurl.FieldCreatedAt,
		})
	}
	if value, ok := luuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linkurl.FieldUpdatedAt,
		})
	}
	if luuo.mutation.BaseURLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.RemovedBaseURLIDs(); len(nodes) > 0 && !luuo.mutation.BaseURLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.BaseURLIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linkurl.BaseURLTable,
			Columns: linkurl.BaseURLPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crawledurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LinkUrl{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
