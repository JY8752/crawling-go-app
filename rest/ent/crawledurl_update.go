// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_rest/ent/crawledurl"
	"JY8752/crawling_app_rest/ent/linkurl"
	"JY8752/crawling_app_rest/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CrawledUrlUpdate is the builder for updating CrawledUrl entities.
type CrawledUrlUpdate struct {
	config
	hooks    []Hook
	mutation *CrawledUrlMutation
}

// Where appends a list predicates to the CrawledUrlUpdate builder.
func (cuu *CrawledUrlUpdate) Where(ps ...predicate.CrawledUrl) *CrawledUrlUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetURL sets the "url" field.
func (cuu *CrawledUrlUpdate) SetURL(s string) *CrawledUrlUpdate {
	cuu.mutation.SetURL(s)
	return cuu
}

// SetCreatedAt sets the "created_at" field.
func (cuu *CrawledUrlUpdate) SetCreatedAt(t time.Time) *CrawledUrlUpdate {
	cuu.mutation.SetCreatedAt(t)
	return cuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuu *CrawledUrlUpdate) SetNillableCreatedAt(t *time.Time) *CrawledUrlUpdate {
	if t != nil {
		cuu.SetCreatedAt(*t)
	}
	return cuu
}

// SetUpdatedAt sets the "updated_at" field.
func (cuu *CrawledUrlUpdate) SetUpdatedAt(t time.Time) *CrawledUrlUpdate {
	cuu.mutation.SetUpdatedAt(t)
	return cuu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuu *CrawledUrlUpdate) SetNillableUpdatedAt(t *time.Time) *CrawledUrlUpdate {
	if t != nil {
		cuu.SetUpdatedAt(*t)
	}
	return cuu
}

// AddLinkURLIDs adds the "link_urls" edge to the LinkUrl entity by IDs.
func (cuu *CrawledUrlUpdate) AddLinkURLIDs(ids ...int) *CrawledUrlUpdate {
	cuu.mutation.AddLinkURLIDs(ids...)
	return cuu
}

// AddLinkUrls adds the "link_urls" edges to the LinkUrl entity.
func (cuu *CrawledUrlUpdate) AddLinkUrls(l ...*LinkUrl) *CrawledUrlUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuu.AddLinkURLIDs(ids...)
}

// Mutation returns the CrawledUrlMutation object of the builder.
func (cuu *CrawledUrlUpdate) Mutation() *CrawledUrlMutation {
	return cuu.mutation
}

// ClearLinkUrls clears all "link_urls" edges to the LinkUrl entity.
func (cuu *CrawledUrlUpdate) ClearLinkUrls() *CrawledUrlUpdate {
	cuu.mutation.ClearLinkUrls()
	return cuu
}

// RemoveLinkURLIDs removes the "link_urls" edge to LinkUrl entities by IDs.
func (cuu *CrawledUrlUpdate) RemoveLinkURLIDs(ids ...int) *CrawledUrlUpdate {
	cuu.mutation.RemoveLinkURLIDs(ids...)
	return cuu
}

// RemoveLinkUrls removes "link_urls" edges to LinkUrl entities.
func (cuu *CrawledUrlUpdate) RemoveLinkUrls(l ...*LinkUrl) *CrawledUrlUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuu.RemoveLinkURLIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *CrawledUrlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cuu.hooks) == 0 {
		if err = cuu.check(); err != nil {
			return 0, err
		}
		affected, err = cuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrawledUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuu.check(); err != nil {
				return 0, err
			}
			cuu.mutation = mutation
			affected, err = cuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cuu.hooks) - 1; i >= 0; i-- {
			if cuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *CrawledUrlUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *CrawledUrlUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *CrawledUrlUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *CrawledUrlUpdate) check() error {
	if v, ok := cuu.mutation.URL(); ok {
		if err := crawledurl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "CrawledUrl.url": %w`, err)}
		}
	}
	return nil
}

func (cuu *CrawledUrlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crawledurl.Table,
			Columns: crawledurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: crawledurl.FieldID,
			},
		},
	}
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crawledurl.FieldURL,
		})
	}
	if value, ok := cuu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crawledurl.FieldCreatedAt,
		})
	}
	if value, ok := cuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crawledurl.FieldUpdatedAt,
		})
	}
	if cuu.mutation.LinkUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.RemovedLinkUrlsIDs(); len(nodes) > 0 && !cuu.mutation.LinkUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.LinkUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crawledurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CrawledUrlUpdateOne is the builder for updating a single CrawledUrl entity.
type CrawledUrlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CrawledUrlMutation
}

// SetURL sets the "url" field.
func (cuuo *CrawledUrlUpdateOne) SetURL(s string) *CrawledUrlUpdateOne {
	cuuo.mutation.SetURL(s)
	return cuuo
}

// SetCreatedAt sets the "created_at" field.
func (cuuo *CrawledUrlUpdateOne) SetCreatedAt(t time.Time) *CrawledUrlUpdateOne {
	cuuo.mutation.SetCreatedAt(t)
	return cuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuuo *CrawledUrlUpdateOne) SetNillableCreatedAt(t *time.Time) *CrawledUrlUpdateOne {
	if t != nil {
		cuuo.SetCreatedAt(*t)
	}
	return cuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuuo *CrawledUrlUpdateOne) SetUpdatedAt(t time.Time) *CrawledUrlUpdateOne {
	cuuo.mutation.SetUpdatedAt(t)
	return cuuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuuo *CrawledUrlUpdateOne) SetNillableUpdatedAt(t *time.Time) *CrawledUrlUpdateOne {
	if t != nil {
		cuuo.SetUpdatedAt(*t)
	}
	return cuuo
}

// AddLinkURLIDs adds the "link_urls" edge to the LinkUrl entity by IDs.
func (cuuo *CrawledUrlUpdateOne) AddLinkURLIDs(ids ...int) *CrawledUrlUpdateOne {
	cuuo.mutation.AddLinkURLIDs(ids...)
	return cuuo
}

// AddLinkUrls adds the "link_urls" edges to the LinkUrl entity.
func (cuuo *CrawledUrlUpdateOne) AddLinkUrls(l ...*LinkUrl) *CrawledUrlUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuuo.AddLinkURLIDs(ids...)
}

// Mutation returns the CrawledUrlMutation object of the builder.
func (cuuo *CrawledUrlUpdateOne) Mutation() *CrawledUrlMutation {
	return cuuo.mutation
}

// ClearLinkUrls clears all "link_urls" edges to the LinkUrl entity.
func (cuuo *CrawledUrlUpdateOne) ClearLinkUrls() *CrawledUrlUpdateOne {
	cuuo.mutation.ClearLinkUrls()
	return cuuo
}

// RemoveLinkURLIDs removes the "link_urls" edge to LinkUrl entities by IDs.
func (cuuo *CrawledUrlUpdateOne) RemoveLinkURLIDs(ids ...int) *CrawledUrlUpdateOne {
	cuuo.mutation.RemoveLinkURLIDs(ids...)
	return cuuo
}

// RemoveLinkUrls removes "link_urls" edges to LinkUrl entities.
func (cuuo *CrawledUrlUpdateOne) RemoveLinkUrls(l ...*LinkUrl) *CrawledUrlUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuuo.RemoveLinkURLIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *CrawledUrlUpdateOne) Select(field string, fields ...string) *CrawledUrlUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated CrawledUrl entity.
func (cuuo *CrawledUrlUpdateOne) Save(ctx context.Context) (*CrawledUrl, error) {
	var (
		err  error
		node *CrawledUrl
	)
	if len(cuuo.hooks) == 0 {
		if err = cuuo.check(); err != nil {
			return nil, err
		}
		node, err = cuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrawledUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuuo.check(); err != nil {
				return nil, err
			}
			cuuo.mutation = mutation
			node, err = cuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuuo.hooks) - 1; i >= 0; i-- {
			if cuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CrawledUrl)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CrawledUrlMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *CrawledUrlUpdateOne) SaveX(ctx context.Context) *CrawledUrl {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *CrawledUrlUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *CrawledUrlUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *CrawledUrlUpdateOne) check() error {
	if v, ok := cuuo.mutation.URL(); ok {
		if err := crawledurl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "CrawledUrl.url": %w`, err)}
		}
	}
	return nil
}

func (cuuo *CrawledUrlUpdateOne) sqlSave(ctx context.Context) (_node *CrawledUrl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crawledurl.Table,
			Columns: crawledurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: crawledurl.FieldID,
			},
		},
	}
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CrawledUrl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crawledurl.FieldID)
		for _, f := range fields {
			if !crawledurl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != crawledurl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crawledurl.FieldURL,
		})
	}
	if value, ok := cuuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crawledurl.FieldCreatedAt,
		})
	}
	if value, ok := cuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crawledurl.FieldUpdatedAt,
		})
	}
	if cuuo.mutation.LinkUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.RemovedLinkUrlsIDs(); len(nodes) > 0 && !cuuo.mutation.LinkUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.LinkUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   crawledurl.LinkUrlsTable,
			Columns: crawledurl.LinkUrlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linkurl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CrawledUrl{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crawledurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
