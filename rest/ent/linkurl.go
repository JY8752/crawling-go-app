// Code generated by ent, DO NOT EDIT.

package ent

import (
	"JY8752/crawling_app_rest/ent/linkurl"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// LinkUrl is the model entity for the LinkUrl schema.
type LinkUrl struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Referer holds the value of the "referer" field.
	Referer string `json:"referer,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinkUrlQuery when eager-loading is set.
	Edges LinkUrlEdges `json:"edges"`
}

// LinkUrlEdges holds the relations/edges for other nodes in the graph.
type LinkUrlEdges struct {
	// BaseURL holds the value of the base_url edge.
	BaseURL []*CrawledUrl `json:"base_url,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BaseURLOrErr returns the BaseURL value or an error if the edge
// was not loaded in eager-loading.
func (e LinkUrlEdges) BaseURLOrErr() ([]*CrawledUrl, error) {
	if e.loadedTypes[0] {
		return e.BaseURL, nil
	}
	return nil, &NotLoadedError{edge: "base_url"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinkUrl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linkurl.FieldID:
			values[i] = new(sql.NullInt64)
		case linkurl.FieldURL, linkurl.FieldReferer:
			values[i] = new(sql.NullString)
		case linkurl.FieldCreatedAt, linkurl.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LinkUrl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinkUrl fields.
func (lu *LinkUrl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linkurl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lu.ID = int(value.Int64)
		case linkurl.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				lu.URL = value.String
			}
		case linkurl.FieldReferer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field referer", values[i])
			} else if value.Valid {
				lu.Referer = value.String
			}
		case linkurl.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lu.CreatedAt = value.Time
			}
		case linkurl.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lu.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryBaseURL queries the "base_url" edge of the LinkUrl entity.
func (lu *LinkUrl) QueryBaseURL() *CrawledUrlQuery {
	return (&LinkUrlClient{config: lu.config}).QueryBaseURL(lu)
}

// Update returns a builder for updating this LinkUrl.
// Note that you need to call LinkUrl.Unwrap() before calling this method if this LinkUrl
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LinkUrl) Update() *LinkUrlUpdateOne {
	return (&LinkUrlClient{config: lu.config}).UpdateOne(lu)
}

// Unwrap unwraps the LinkUrl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LinkUrl) Unwrap() *LinkUrl {
	_tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("ent: LinkUrl is not a transactional entity")
	}
	lu.config.driver = _tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LinkUrl) String() string {
	var builder strings.Builder
	builder.WriteString("LinkUrl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lu.ID))
	builder.WriteString("url=")
	builder.WriteString(lu.URL)
	builder.WriteString(", ")
	builder.WriteString("referer=")
	builder.WriteString(lu.Referer)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LinkUrls is a parsable slice of LinkUrl.
type LinkUrls []*LinkUrl

func (lu LinkUrls) config(cfg config) {
	for _i := range lu {
		lu[_i].config = cfg
	}
}
